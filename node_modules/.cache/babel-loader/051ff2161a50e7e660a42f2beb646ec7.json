{"ast":null,"code":"var _jsxFileName = \"/home/learn/Desktop/ShoutRandomly/frontend/src/components/PostComment.js\";\nimport React, { Component, Fragment } from 'react';\nimport ShoutButton from './ShoutButton';\nimport CommentButton from './CommentButton';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Comment, Close } from '@material-ui/icons';\n\nconst styles = theme => ({\n  submitButton: {\n    position: 'relative'\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '85%',\n    top: '10%'\n  }\n});\n\nclass PostComment extends Component {\n  constructor() {\n    super();\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      if (this.state.body !== \"\") {\n        const {\n          body\n        } = this.state;\n        event.preventDefault();\n        const token = localStorage.getItem('token');\n        const postObj = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            body: body\n          })\n        };\n        fetch(`http://localhost:3000/shouts`, postObj).then(resp => resp.json()).then(data => console.log(data)).catch(error => {\n          throw error;\n          this.setState({\n            error: error\n          });\n        });\n        this.handleClose();\n      } else {\n        event.preventDefault();\n        alert('Shout must not be blank');\n        return false;\n      }\n    };\n\n    this.state = {\n      open: false,\n      body: '',\n      error: \"\"\n    };\n  }\n\n  render() {\n    console.log(this.state);\n    const {\n      errors\n    } = this.state;\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CommentButton, {\n      onClick: this.handleOpen,\n      tip: \"Post a Shout!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AddCircle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: classes.closeButton,\n      onClick: this.handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Close, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DialogTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, \"Post a new Shout\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      name: \"body\",\n      type: \"text\",\n      label: \"Shout!\",\n      multiline: true,\n      rows: \"3\",\n      placeholder: \"Shout!\" // error = {error.body ? true : false} \n      // helperText={error.body}\n      ,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 29\n      }\n    }, \"Submit\")))));\n  }\n\n}\n\nexport default withStyles(styles)(PostComment);","map":{"version":3,"sources":["/home/learn/Desktop/ShoutRandomly/frontend/src/components/PostComment.js"],"names":["React","Component","Fragment","ShoutButton","CommentButton","withStyles","Button","TextField","Dialog","DialogContent","DialogTitle","Comment","Close","styles","theme","submitButton","position","closeButton","left","top","PostComment","constructor","handleOpen","setState","open","handleClose","handleChange","event","target","name","value","handleSubmit","state","body","preventDefault","token","localStorage","getItem","postObj","method","headers","JSON","stringify","fetch","then","resp","json","data","console","log","catch","error","alert","render","errors","classes","props"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,oBAA/B;;AAGA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACrBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE;AADA,GADO;AAIrBC,EAAAA,WAAW,EAAE;AACTD,IAAAA,QAAQ,EAAE,UADD;AAETE,IAAAA,IAAI,EAAE,KAFG;AAGTC,IAAAA,GAAG,EAAE;AAHI;AAJQ,CAAL,CAApB;;AAWA,MAAMC,WAAN,SAA0BnB,SAA1B,CAAmC;AAC/BoB,EAAAA,WAAW,GAAE;AACT;;AADS,SASbC,UATa,GASA,MAAM;AACf,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAd;AACH,KAXY;;AAAA,SAabC,WAba,GAaA,MAAM;AACf,WAAKF,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAd;AACH,KAfY;;AAAA,SAiBbE,YAjBa,GAiBGC,KAAD,IAAW;AACtB,WAAKJ,QAAL,CAAc;AACV,SAACI,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AADxB,OAAd;AAGH,KArBY;;AAAA,SAuBbC,YAvBa,GAuBGJ,KAAD,IAAW;AACtB,UAAI,KAAKK,KAAL,CAAWC,IAAX,KAAoB,EAAxB,EAA2B;AACvB,cAAM;AAACA,UAAAA;AAAD,YAAS,KAAKD,KAApB;AACJL,QAAAA,KAAK,CAACO,cAAN;AACA,cAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,cAAMC,OAAO,GAAG;AACZC,UAAAA,MAAM,EAAE,MADI;AAEZC,UAAAA,OAAO,EAAE;AAAC,4BAAgB,kBAAjB;AAAqC,6BAAkB,UAASL,KAAM;AAAtE,WAFG;AAGZF,UAAAA,IAAI,EAAEQ,IAAI,CAACC,SAAL,CAAe;AAACT,YAAAA,IAAI,EAAEA;AAAP,WAAf;AAHM,SAAhB;AAKAU,QAAAA,KAAK,CAAE,8BAAF,EAAiCL,OAAjC,CAAL,CACCM,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMG,IAAI,IACNC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAHJ,EAMCG,KAND,CAMOC,KAAK,IAAI;AACZ,gBAAMA,KAAN;AACA,eAAK5B,QAAL,CAAc;AAAC4B,YAAAA,KAAK,EAAEA;AAAR,WAAd;AACH,SATD;AAWA,aAAK1B,WAAL;AACC,OArBD,MAsBI;AACAE,QAAAA,KAAK,CAACO,cAAN;AACAkB,QAAAA,KAAK,CAAC,yBAAD,CAAL;AACA,eAAO,KAAP;AAEH;AACJ,KApDY;;AAET,SAAKpB,KAAL,GAAa;AACTR,MAAAA,IAAI,EAAE,KADG;AAETS,MAAAA,IAAI,EAAE,EAFG;AAGRkB,MAAAA,KAAK,EAAE;AAHC,KAAb;AAKH;;AA+CDE,EAAAA,MAAM,GAAE;AACJL,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjB,KAAjB;AACA,UAAM;AAAEsB,MAAAA;AAAF,QAAa,KAAKtB,KAAxB;AACA,UAAM;AAAEuB,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,wBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAE,KAAKlC,UAA7B;AAAyC,MAAA,GAAG,EAAC,eAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAKI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAE,KAAKU,KAAL,CAAWR,IAAzB;AAA+B,MAAA,OAAO,EAAE,KAAKC,WAA7C;AAA0D,MAAA,SAAS,MAAnE;AAAoE,MAAA,QAAQ,EAAC,IAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAG8B,OAAO,CAACtC,WAA5B;AAAyC,MAAA,OAAO,EAAE,KAAKQ,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADJ,eAII,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJJ,eAQI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,QAAQ,EAAE,KAAKM,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,MAAhB;AACA,MAAA,IAAI,EAAC,MADL;AAEA,MAAA,KAAK,EAAC,QAFN;AAGA,MAAA,SAAS,MAHT;AAIA,MAAA,IAAI,EAAC,GAJL;AAKA,MAAA,WAAW,EAAC,QALZ,CAMA;AACA;AAPA;AASA,MAAA,QAAQ,EAAG,KAAKL,YAThB;AAUA,MAAA,SAAS,MAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAaI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbJ,CADJ,CARJ,CALJ,CADJ;AAqCH;;AAhG8B;;AAoGnC,eAAgBrB,UAAU,CAACQ,MAAD,CAAV,CAAmBO,WAAnB,CAAhB","sourcesContent":["import React, {Component, Fragment} from 'react'\nimport ShoutButton from './ShoutButton'\nimport CommentButton from './CommentButton'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { Comment, Close } from '@material-ui/icons';\n\n\nconst styles = theme => ({\n    submitButton: {\n        position: 'relative'\n    }, \n    closeButton: {\n        position: 'absolute',\n        left: '85%',\n        top: '10%'\n    }\n})\n\nclass PostComment extends Component{\n    constructor(){\n        super()\n        this.state = {\n            open: false,\n            body: '',\n             error: \"\"\n        }\n    }\n\n    handleOpen = () => {\n        this.setState({open: true})\n    }\n\n    handleClose= () => {\n        this.setState({open: false})\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleSubmit = (event) => {\n        if (this.state.body !== \"\"){\n            const {body} = this.state\n        event.preventDefault()\n        const token = localStorage.getItem('token')\n        const postObj = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n            body: JSON.stringify({body: body})\n        }\n        fetch(`http://localhost:3000/shouts`, postObj)\n        .then(resp => resp.json())\n        .then(data => \n            console.log(data)\n             \n        )\n        .catch(error => {\n            throw(error);\n            this.setState({error: error})\n        })\n\n        this.handleClose()\n        }\n        else{\n            event.preventDefault()\n            alert('Shout must not be blank')\n            return false;\n\n        }\n    }\n\n    render(){\n        console.log(this.state)\n        const { errors } = this.state\n        const { classes } = this.props\n        return(\n            <Fragment>\n                <CommentButton onClick={this.handleOpen} tip=\"Post a Shout!\">\n                    <AddCircle />\n                </CommentButton>\n\n                <Dialog open={this.state.open} onClose={this.handleClose} fullWidth maxWidth=\"sm\">\n                    <Button className= {classes.closeButton} onClick={this.handleClose} >\n                    <Close />\n                    </Button>\n                    <DialogTitle> \n                        Post a new Shout\n                    </DialogTitle>\n\n                    <DialogContent>\n                        <form onSubmit={this.handleSubmit}>\n                            <TextField name=\"body\"\n                            type=\"text\"\n                            label=\"Shout!\"\n                            multiline\n                            rows=\"3\"\n                            placeholder=\"Shout!\"\n                            // error = {error.body ? true : false} \n                            // helperText={error.body}\n                            \n                            onChange= {this.handleChange}\n                            fullWidth\n                            />\n                            <Button type='submit' variant=\"contained\"\n                            >\n                                Submit\n                            </Button>\n                        </form>\n                    </DialogContent>\n                </Dialog>\n            </Fragment>\n        )\n    }\n}\n\n\nexport default (withStyles(styles)(PostComment))"]},"metadata":{},"sourceType":"module"}